[{"path":"/articles/Example_analysis.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example Analysis","text":"tried use dataset find relationship light levels bird collisions without flight calls. Also want identify trend light levels time.","code":""},{"path":"/articles/Example_analysis.html","id":"data-recourses","dir":"Articles","previous_headings":"","what":"Data recourses","title":"Example Analysis","text":"data comes research examined nocturnal flight-calling behavior vulnerability artificial light migratory birds Chicago(Winger et al. 2019). downloaded dataset . can also download dataset using “tidytuesdayR” package. data used containing raw tamed Chicago dataset complete. can use readJPEG() function jpeg package read image JPEG, can plot figure.  can also use writeJPEG() function jpeg package create JPEG image array matrix. time, can change quality background color image.  can see applying writeJPEG() function, size image changed.","code":"study_locations <- jpeg::readJPEG(here(\"study_locations.jpeg\"), TRUE) if (exists(\"rasterImage\")) { # can plot only in R 2.11.0 and higher       plot(1:2, type='n', axes=FALSE, xlab=\"\", ylab=\"\", main = \"Study Locations(Winger et al. 2019)\")       rasterImage(study_locations, 1, 1, 2, 2)     } study_locations_arrary <- writeJPEG(study_locations, raw(), quality= 0.3) study_locations_2 <- readJPEG(study_locations_arrary) if (exists(\"rasterImage\")) { # can plot only in R 2.11.0 and higher       plot(1:2, type='n', axes=FALSE, xlab=\"\", ylab=\"\", main = \"Study Locations(Winger et al. 2019)\")       rasterImage(study_locations, 1, 1, 2, 2)     } object.size(study_locations) #> 602616 bytes object.size(study_locations_2) #> 3612224 bytes"},{"path":[]},{"path":[]},{"path":"/articles/Example_analysis.html","id":"bird-collisions-dataset-1","dir":"Articles","previous_headings":"Data Dictionary","what":"bird collisions dataset","title":"Example Analysis","text":"can also find data dictionary ","code":""},{"path":"/articles/Example_analysis.html","id":"load-the-data-into-r","dir":"Articles","previous_headings":"","what":"Load the data into R","title":"Example Analysis","text":"","code":"if (!dir.exists(here(\"data\"))) {     dir.create(here(\"data\")) }  # saves data only once (not each time you knit a R Markdown) if (!file.exists(here(\"data\", \"bird_collisions.rda\"))) {     url_csv <- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/bird_collisions.csv\"     bird_collisions <- readr::read_csv(url_csv)      # save the file to rda objects     save(bird_collisions, file = here(\"data\", \"bird_collisions.rda\")) }  # Read in the data locally load(here(\"data\", \"bird_collisions.rda\"))  # load the second dataset if (!file.exists(here(\"data\", \"mp_light.rda\"))) {     url_csv <- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/mp_light.csv\"     mp_light <- readr::read_csv(url_csv)      # save the file to rda objects     save(mp_light, file = here(\"data\", \"mp_light.rda\")) }  # Read in the data locally load(here(\"data\", \"mp_light.rda\"))"},{"path":"/articles/Example_analysis.html","id":"data-wrangling-and-data-visualization","dir":"Articles","previous_headings":"","what":"data wrangling and data visualization","title":"Example Analysis","text":"order look effects light bird collisions, join two datasets, may drop many rows bird_collisions data frame. First , let’s look relationship bird collision counts species flight calls. two species (Pipilo erythrophthalmus Tyrannus tyrannus) giving nocturnal flight calls rarely. data analysis, authors found “classification species ‘yes’ ‘’ flight-calling behaviour affect results” classified two species ‘’(Winger et al. 2019). , also classified two species ‘’ make analysis easier. results, can conclude bird collisions happen within flight callers use vocal signals nocturnal migrations function important social cues may aid orientation, navigation decision-making behaviours. effect flight calling evident need consider flight call following analysis. want look relationship light levels collision counts.  let’s find top 50 species commonly reported bird collisions. Since now going look effects light levels, use original bird collision dataset data collected.  Finally, let’s look distribution light levels time goes 2000 2018.","code":"bird_collisions_light <- inner_join(bird_collisions, mp_light,                                    by = \"date\") #> Warning in inner_join(bird_collisions, mp_light, by = \"date\"): Detected an unexpected many-to-many relationship between `x` and `y`. #> ℹ Row 5289 of `x` matches multiple rows in `y`. #> ℹ Row 9 of `y` matches multiple rows in `x`. #> ℹ If a many-to-many relationship is expected, set `relationship = #>   \"many-to-many\"` to silence this warning. is_yes <- function(x) ifelse(x == \"Yes\", 1, 0) is_no <- function(x) ifelse(x == \"No\" || x == \"Rare\", 1, 0) flight_call_list <- c(freq_yes = mean(map_lgl(bird_collisions_light$flight_call, is_yes)),                       freq_no = mean(map_lgl(bird_collisions_light$flight_call, is_no)))  print(flight_call_list) #>   freq_yes    freq_no  #> 0.95828137 0.04171863 #First, we classified two species with 'rare' calls as 'no'. bird_collisions_light$flight_call <-   map_chr(bird_collisions_light$flight_call, ~ if_else(.x == \"Rare\", \"No\", .x))  # the bird collisions count among flight noncallers collision_counts_light_noncaller <-    bird_collisions_light %>%   filter(flight_call == \"No\" ) %>%   group_by(light_score) %>%   summarise(count = n()) %>%   ungroup() %>%   split(.$light_score) %>%              map_df(~ summarise(., light_score, count = sum(.$count)))   collision_counts_light_noncaller #> # A tibble: 15 × 2 #>    light_score count #>          <dbl> <int> #>  1           3   131 #>  2           4   316 #>  3           5    68 #>  4           6   134 #>  5           7    54 #>  6           8    19 #>  7           9    72 #>  8          10    74 #>  9          11    52 #> 10          12    93 #> 11          13    65 #> 12          14   187 #> 13          15    87 #> 14          16    62 #> 15          17   292  # the bird collisions count among flight callers collision_counts_light_caller <-    bird_collisions_light %>%   filter(flight_call == \"Yes\") %>%   group_by(light_score) %>%   summarise(count = n()) %>%   ungroup() %>%   split(.$light_score) %>%              map_df(~ summarise(., light_score, count = sum(.$count)))   collision_counts_light_caller #> # A tibble: 15 × 2 #>    light_score count #>          <dbl> <int> #>  1           3  2917 #>  2           4  5900 #>  3           5  1124 #>  4           6  1908 #>  5           7  1089 #>  6           8   502 #>  7           9  1211 #>  8          10  1437 #>  9          11  1082 #> 10          12  2613 #> 11          13  1266 #> 12          14  5040 #> 13          15  2463 #> 14          16  2898 #> 15          17  7737  # the bird collisions count  collision_counts_light <-     bird_collisions_light %>%   group_by(light_score, flight_call) %>%   summarise(count = n()) %>%   group_split() %>%   bind_rows() #> `summarise()` has grouped output by 'light_score'. You can override using the #> `.groups` argument. ggplot(collision_counts_light) +   geom_smooth(mapping = aes(x = light_score, y = count, color = flight_call))+   geom_point(mapping = aes(x = light_score, y = count, color = flight_call)) +   facet_wrap(~flight_call, ncol = 1,  scales = \"free\" ) +   scale_color_manual(values = c(\"lightblue\", \"lightpink\")) +   theme_classic(base_family = \"Times\") +   labs(     x = \"Light Score\",     y = \"Bird Collisions Counts\",     title = \"The Relationship Between Light Levels and Bird Collision Counts\",     subtitle = \"The flight noncallers group and flight callers group show the same trend as the light score increases.\\nAt first,the number of bird collisions decrease as the light increases,\\nthen as light scores increase, the bird collision counts also tend to increase.\\nIn general, the bird collisions maintain an upward trajectory.\",     caption = \"Jiayi Xue\",     color = \"Nocturnal Flight Call\"   ) +   theme(         plot.title =  element_text(size = 14, face = \"bold\", hjust = 0.5),         plot.caption = element_text(size = 10),         axis.text.y = element_text(size = 9),         axis.title = element_text(size = 13),         legend.text = element_text(size = 10),         legend.title = element_text(size = 12)) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' bird_collisions_species <-   bird_collisions %>%   group_by(species, flight_call) %>%   summarise(count = n()) %>%   mutate(species = fct_reorder(species, count, .desc = T)) %>%   arrange(desc(count)) #> `summarise()` has grouped output by 'species'. You can override using the #> `.groups` argument.  bird_collisions_species #> # A tibble: 84 × 3 #> # Groups:   species [81] #>    species     flight_call count #>    <fct>       <chr>       <int> #>  1 albicollis  Yes         10133 #>  2 hyemalis    Yes          6303 #>  3 melodia     Yes          5124 #>  4 georgiana   Yes          4910 #>  5 aurocapilla Yes          4580 #>  6 guttatus    Yes          3729 #>  7 americana   Yes          2735 #>  8 peregrina   Yes          2515 #>  9 iliaca      Yes          2443 #> 10 ustulatus   Yes          2331 #> # ℹ 74 more rows ggplot(bird_collisions_species[1:50, ]) +   geom_col(mapping = aes(x = count, y = reorder(species, count), fill = flight_call)) +   theme_classic(base_family = \"Times\") +   labs(     x = \"Bird Collisions Counts\",     y = \"Bird Species\",     title = \"Bird Collisions Counts for Top 50 species\",     subtitle = \"From the bar plot, we can see that bird collisions happen most frequently among albicollis, with more than 10000 collisions.\\nAmong top 50 species, most of the species are flight callers, which is consistent with our previous results.\",     caption = \"Jiayi Xue\",     fill = \"Nocturnal Flight Call\",        ) +   scale_fill_manual(values = c(\"lightblue\", \"lightpink\")) +   theme(         plot.title =  element_text(size = 14, face = \"bold\", hjust = 0.5),         plot.caption = element_text(size = 10),         axis.text.x =  element_text(size = 10),         axis.text.y = element_text(size = 9),         axis.title = element_text(size = 12),         legend.text = element_text(size = 10),         legend.title = element_text(size = 12)) light_years <-   mp_light %>%   mutate(year = lubridate::year(date))   light_years #> # A tibble: 3,067 × 3 #>    date       light_score  year #>    <date>           <dbl> <dbl> #>  1 2000-03-06           3  2000 #>  2 2000-03-08          15  2000 #>  3 2000-03-10           3  2000 #>  4 2000-03-31           3  2000 #>  5 2000-04-02          17  2000 #>  6 2000-04-14           4  2000 #>  7 2000-04-15           4  2000 #>  8 2000-04-30          14  2000 #>  9 2000-05-01          14  2000 #> 10 2000-05-03           3  2000 #> # ℹ 3,057 more rows color_list <-    colorRampPalette(ggsci::pal_npg(\"nrc\", alpha = 0.6)(4),space = \"Lab\")(19)  ggplot(light_years) +   geom_boxplot(mapping = aes(x = as.factor(year), y = light_score, fill = as.factor(year)), width = 0.5, alpha = 0.5) +   theme_classic(base_family = \"Times\") +    labs(     x = \"Year\",     y = \"Light Levels\",     title = \"Boxplots of Light Levels over Time\",     fill = \"Year\",     subtitle = \"The light levels have a fluctuating but overall increasing trend over time from the year 2000 to 2018. \\nThe median light levels seem to be higher in the later years, particularly from 2014 to 2018.\",     caption = \"Jiayi Xue\"   ) +   scale_fill_manual( values = color_list) +   theme(         plot.title =  element_text(size = 14, face = \"bold\", hjust = 0.5),         plot.caption = element_text(size = 10),         axis.text = element_text(size = 9),         axis.title = element_text(size = 12),         legend.position = \"none\")"},{"path":"/articles/Example_analysis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Example Analysis","text":"dataset collects bird collision data Chicago. scatter plots shows bird collisions happen frequently light level increases. bar plot displays collision counts top 50 species, indicates evident effect flight calls. boxplots indicates overall increasing trend collisions time. Together, find many factors influencing number bird collisions.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Urbanek. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Urbanek S (2023). jpeg: Read write JPEG images. R package version 0.1-10, https://www.rforge.net/jpeg/.","code":"@Manual{,   title = {jpeg: Read and write JPEG images},   author = {Simon Urbanek},   year = {2023},   note = {R package version 0.1-10},   url = {https://www.rforge.net/jpeg/}, }"},{"path":[]},{"path":"/index.html","id":"url-to-the-github-link-to-the-original-r-package","dir":"","previous_headings":"","what":"URL to the GitHub link to the original R package:","title":"Read and write JPEG images","text":"https://github.com/s-u/jpeg","code":""},{"path":"/index.html","id":"url-to-the-deployed-website-that-in-part-1e","dir":"","previous_headings":"","what":"URL to the deployed website that in Part 1E:","title":"Read and write JPEG images","text":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-jiayi-xue/","code":""},{"path":"/index.html","id":"id_5-things-customized-in-the-pkgdown-website-excluding-adding-the-example-data-analysis-from-part-1c","dir":"","previous_headings":"","what":"5 things customized in the pkgdown website (excluding adding the example data analysis from Part 1C):","title":"Read and write JPEG images","text":"Change bootswatch theme ‘minty’. colours used syntax highlighting code blocks changed ‘ayu-light’ theme. Change fonts text. Switch position left right navigation bar. Remove homepage sidebar.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"goal","dir":"","previous_headings":"","what":"Goal:","title":"Read and write JPEG images","text":"package can used read, write display bitmap images stored JPEG format.","code":""},{"path":"/index.html","id":"exported-functions","dir":"","previous_headings":"","what":"Exported functions:","title":"Read and write JPEG images","text":"readJPEG(): Read image JPEG file/content raster array. writeJPEG(): Create JPEG image array matrix.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and write JPEG images","text":"can install development version jpeg GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"s-u/jpeg\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Read and write JPEG images","text":"basic example shows solve common problem:","code":"library(jpeg) ## basic example code for readJPEG function:  # read a sample file (R logo)     img <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"))     # read it also in native format     img.n <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"), TRUE)     if (exists(\"rasterImage\")) { # can plot only in R 2.11.0 and higher       plot(1:2, type='n')       rasterImage(img, 1.2, 1.27, 1.8, 1.73)       rasterImage(img.n, 1.5, 1.5, 1.9, 1.8)     }"},{"path":"/reference/readJPEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a bitmap image stored in the JPEG format — readJPEG","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"Reads image JPEG file/content raster array.","code":""},{"path":"/reference/readJPEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"","code":"readJPEG(source, native = FALSE)"},{"path":"/reference/readJPEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"source Either name file read raw vector   representing JPEG file content. native determines image representation - FALSE   (default) result array, TRUE   result native raster representation.","code":""},{"path":"/reference/readJPEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"native FALSE array dimensions height x width x channels. one channel result matrix. values reals 0 1. native TRUE object class nativeRaster returned instead. latter easily computed efficient way draw using rasterImage. common files decompress RGB (3 channels) Grayscale (1 channel). Note Grayscale images directly used rasterImage unless native set TRUE rasterImage requires RGB RGBA format (nativeRaster always 8-bit RGBA). JPEG support alpha channel, may want use PNG instead situations.","code":""},{"path":"/reference/readJPEG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"CMYK JPEG images saved Adobe Photoshop may inverted ink values due   bug Photoshop. Unfortunately includes sample CMYK   images floating around, beware source   converting result color spaces. readJPEG   preserve values exactly encoded file.","code":""},{"path":[]},{"path":"/reference/readJPEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"","code":"# read a sample file (R logo) img <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"))  # read it also in native format img.n <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"), TRUE)  # if your R supports it, we'll plot it if (exists(\"rasterImage\")) { # can plot only in R 2.11.0 and higher   plot(1:2, type='n')    rasterImage(img, 1.2, 1.27, 1.8, 1.73)   rasterImage(img.n, 1.5, 1.5, 1.9, 1.8) }"},{"path":"/reference/writeJPEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a bitmap image in JPEG format — writeJPEG","title":"Write a bitmap image in JPEG format — writeJPEG","text":"Create JPEG image array matrix.","code":""},{"path":"/reference/writeJPEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a bitmap image in JPEG format — writeJPEG","text":"","code":"writeJPEG(image, target = raw(), quality = 0.7, bg = \"white\", color.space)"},{"path":"/reference/writeJPEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a bitmap image in JPEG format — writeJPEG","text":"image image represented real matrix array values     range 0 1. Values outside range     clipped. object must either two-dimensional (grayscale     matrix) three dimensional array (third dimension specifying     plane) must either one (grayscale), two (grayscale +     alpha), three (RGB) four (RGB + alpha) planes. (alternative     image specifications see deatils) target Either name file write , binary     connection, raw vector (raw() - default - good     enough) indicating output raw vector. quality JPEG quality - real number 0 (lowest) 1     (highest) controlling quality output. Lower quality     produces smaller, lossy files. bg background color - used input contains alpha     channel since JPEG support storage alpha channel     thus image needs flattened placed     background color. color.space color space image data     interpreted. Defaults \"color.space\" attribute     image NULL interpreted default color space.     color space specified must match image array     dimensions, conversions performed. Currently     supported non-default color space \"CMYK\" four-channel     images (interpreted \"RGBA\" color     space specified).","code":""},{"path":"/reference/writeJPEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a bitmap image in JPEG format — writeJPEG","text":"NULL target either file connection, raw   vector containing compressed JPEG image target raw   vector.","code":""},{"path":"/reference/writeJPEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a bitmap image in JPEG format — writeJPEG","text":"writeJPEG takes image input compresses JPEG   format. image input usually matrix (grayscale images -   dimensions width, height) array (color alpha   images - dimensions width, height, planes) reals. planes   interpreted sequence red, green, blue, alpha.   convenience writeJPEG allows source include alpha   channel, JPEG support alpha channel   blended specified background. Alternative representation image nativeRaster class   integer matrix entry representing one pixel   binary encoded RGBA format (used internally R). can   obtained readJPEG using native = TRUE. Finally, writeJPEG also supports raw array containing RGBA   (CMYK) image bytes. dimensions raw array   planes, width, height (storage interleaved). Currently   4 planes (RGBA CMYK) supported processing RGBA   equivalent native raster. result either stored file (target file   name), send binary connection (target connection)   stored raw vector (target raw vector).","code":""},{"path":"/reference/writeJPEG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write a bitmap image in JPEG format — writeJPEG","text":"Currently writeJPEG produces 8-bit, non-progressive JPEG   format additional tags.","code":""},{"path":[]},{"path":"/reference/writeJPEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a bitmap image in JPEG format — writeJPEG","text":"","code":"# read a sample file (R logo) img <- readJPEG(system.file(\"img\",\"Rlogo.jpg\",package=\"jpeg\")) # write the image into a raw vector - using a low quality r <- writeJPEG(img, raw(), quality=0.3) # read it back again img2 <- readJPEG(r) # it will be slightly different since JPEG is a lossy format # in particular at the low quality max(abs(img - img2)) #> [1] 0.3215686 stopifnot(max(abs(img - img2)) < 0.4)  # try to write a native raster img3 <- readJPEG(system.file(\"img\",\"Rlogo.jpg\",package=\"jpeg\"), TRUE) r2 <- writeJPEG(img3, raw()) img4 <- readJPEG(r2, TRUE) # comparing nativeRaster values is not easy, so let's do write/read again img5 <- readJPEG(writeJPEG(img4, raw())) max(abs(img - img5)) #> [1] 0.1843137 stopifnot(max(abs(img - img5)) < 0.3)"}]
